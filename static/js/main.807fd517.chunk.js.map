{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js","containers/logo.png"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","renderCard","cats","map","cat","i","components_Card","key","Scroll","props","style","overflow","border","height","children","SearchBox","searchChange","onChange","type","placeholder","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","searchfield","onSearchChange","event","_this","target","value","console","log","_this2","fetch","then","response","json","_this3","findcats","filter","toLowerCase","includes","length","logo","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.807fd517.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"col-sm-4\">\n      <div className=\"mycard\">\n        <div className=\"card mx-2 mb-2 my-2 bg-gradient-light border border-warning \">\n          <img\n            className=\"card-image image-fluid\"\n            src={`https://robohash.org/${id}/?set=set4`}\n            alt=\"name\"\n          />\n          <div className=\"card-body\">\n            <h2 className=\"card-title text-dark text-center\">{name}</h2>\n            <p className=\"card-text text-dark text-center\">{email}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ cats }) => {\n  const renderCard = cats.map((cat, i) => {\n    return (\n      <Card id={cat.id} name={cat.name} email={cat.email} key={`cat-${i}`} />\n    );\n  });\n  return (\n    <div className=\"row\">\n      {renderCard}\n      {renderCard}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflow: 'scroll',\n        border: '1px solid black',\n        height: '1000px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"input-group mb-3 border border-success\">\n      <input\n        className=\"form-control \"\n        onChange={searchChange}\n        type=\"text\"\n        placeholder=\"search cats\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  state = {\n    hasError: false\n  };\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n  render() {\n    if (this.state.hasError) {\n      return <h1>Opps! Something Went Wrong</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport logo from './logo.png';\n\nclass App extends Component {\n  state = {\n    cats: [],\n    searchfield: ''\n  };\n\n  onSearchChange = event => {\n    this.setState({\n      searchfield: event.target.value\n    });\n\n    console.log(event.target.value);\n  };\n\n  componentDidMount() {\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n      .then(response => response.json())\n      .then(cats => {\n        console.log(cats);\n        this.setState({ cats });\n      });\n  }\n\n  render() {\n    const findcats = this.state.cats.filter(cat => {\n      return cat.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    });\n\n    if (!this.state.cats.length) return <div>Loading....</div>;\n    else {\n      return (\n        <div className=\"container\">\n          <div className=\"inline-block\">\n            <img src={logo} className=\" d-inline mr-5 pr-5\" alt=\"cat-logo\" />\n            <h1 className=\"ml-5 pl-5 d-inline text-justify\">\n              Find your Purrfect Feline\n            </h1>\n          </div>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList cats={findcats} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d0e5c9b.png\";"],"sourceRoot":""}